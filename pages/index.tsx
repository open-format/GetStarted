import RewardSystem from "@/utils/RewardSystem";
import { useOpenFormat } from "@openformat/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import toast from "react-hot-toast";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import { useLoggedInAddress } from "@/contexts/LoggedInAddressContext";
import { supabase } from "@/utils/supabaseClient";

// Load the Inter font with specified subset
const inter = Inter({ subsets: ["latin"] });

// Home page component
export default function Home() {
  // Use the useWallet and useOpenFormat hooks
  const { loggedInAddress } = useLoggedInAddress();
  const { sdk } = useOpenFormat();
  const [loggingIn, setLoggingIn] = useState(false);

  const router = useRouter();
  // Use the useEffect hook to listen for authentication state changes
  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === "SIGNED_IN" || event === "USER_UPDATED") {
          setLoggingIn(true); // Set loggingIn to true

          // Show the "Logging in" loading toast
          const loadingToastId = toast.loading("Logging in...");

          // Wait for 3 seconds
          await new Promise((resolve) => setTimeout(resolve, 3000));

          // Replace the current route with /login and execute getServerSideProps
          await router.replace("/login");

          // Dismiss the loading toast and show the "Logged in" success toast
          toast.dismiss(loadingToastId);
          toast.success("Logged in");

          setLoggingIn(false); // Set loggingIn back to false
        }
      }
    );

    // Clean up the listener when the component is unmounted
    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [router]);

  const rewardSystem = new RewardSystem(sdk);

  // Function to handle the connect button click
  async function handleConnect() {
    if (loggedInAddress) {
      // Add loading toast
      const loadingToastId = toast.loading(
        "Processing... this can take a while depending on chain network conditions."
      );

      // Handle the completed action and get user rewards
      const user = await rewardSystem.handleCompletedAction(
        loggedInAddress,
        "connect"
      );

      // Dismiss loading toast
      toast.dismiss(loadingToastId);

      // Display the rewarded tokens in a success toast
      for (const token of user.rewarded) {
        let message = `Thank you for completing the `;
        if (token.activityType === "ACTION") {
          message += `action ${token.id}`;
        } else if (token.activityType === "MISSION") {
          message += `mission ${token.id}`;
        }
        message += `, you have received ${token.amount} ${token.type}`;
        toast.success(message, {
          duration: 5000,
        });
      }
    }
  }

  const overlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    backgroundColor: "rgba(0, 0, 0, 0.8)",
    zIndex: 1000,
  };

  return (
    <>
      {/* Render the overlay when loggingIn is true */}
      {loggingIn && <div style={overlayStyle}></div>}
      <Head>
        <title>Create OpenFormat Dapp</title>
        <meta
          name="description"
          content="Generated by create-openformat-dapp"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Get started by heading to&nbsp;
            <code className={styles.code}>README.md</code>
          </p>
          <div>
            <Link
              href="https://openformat.tech"
              target="_blank"
              rel="noopener noreferrer"
            >
              By <p>OPENFORMAT</p>
            </Link>
          </div>
        </div>

        <div className={styles.center}>
          <p className={styles.title}>Dapp Wrap</p>
          <div className={styles.buttoncontainer}>
            <button className={styles.button} onClick={handleConnect}>
              Trigger Action
            </button>
          </div>
        </div>

        <div className={styles.grid}>
          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Docs</h2>
            <p className={inter.className}>
              Find in-depth information about OPENFORMAT
            </p>
          </Link>

          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Bounties</h2>
            <p className={inter.className}>
              Discover developer bounties at our GitHub
            </p>
          </Link>

          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Templates</h2>
            <p className={inter.className}>
              Discover and deploy boilerplate template Dapps.
            </p>
          </Link>
        </div>
      </main>
    </>
  );
}
