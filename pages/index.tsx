import RewardSystem from "@/utils/RewardSystem";
import { useOpenFormat, useWallet } from "@openformat/react";
import Head from "next/head";
import React from "react";
import toast from "react-hot-toast";
import { Inter } from "next/font/google";
import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";
import styles from "@/styles/Home.module.css";
import { Wallet } from "ethers";
import Link from "next/link";
import { useLoggedInAddress } from "@/contexts/LoggedInAddressContext";

// Load the Inter font with specified subset
const inter = Inter({ subsets: ["latin"] });

// Home page component
export default function Home() {
  // Use the useWallet and useOpenFormat hooks
  const { loggedInAddress } = useLoggedInAddress();
  const { sdk } = useOpenFormat();

  const rewardSystem = new RewardSystem(sdk);

  // Function to handle the connect button click
  async function handleConnect() {
    if (loggedInAddress) {
      // Add loading toast
      const loadingToastId = toast.loading(
        "Processing... this can take a while depending on chain network conditions."
      );

      // Handle the completed action and get user rewards
      const user = await rewardSystem.handleCompletedAction(
        loggedInAddress,
        "connect"
      );

      // Dismiss loading toast
      toast.dismiss(loadingToastId);

      // Display the rewarded tokens in a success toast
      for (const token of user.rewarded) {
        let message = `Thank you for completing the `;
        if (token.activityType === "ACTION") {
          message += `action ${token.id}`;
        } else if (token.activityType === "MISSION") {
          message += `mission ${token.id}`;
        }
        message += `, you have received ${token.amount} ${token.type}`;
        toast.success(message, {
          duration: 5000,
        });
      }
    }
  }

  return (
    <>
      <Head>
        <title>Create OpenFormat Dapp</title>
        <meta
          name="description"
          content="Generated by create-openformat-dapp"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Get started by heading to&nbsp;
            <code className={styles.code}>README.md</code>
          </p>
          <div>
            <Link
              href="https://openformat.tech"
              target="_blank"
              rel="noopener noreferrer"
            >
              By <p>OPENFORMAT</p>
            </Link>
          </div>
        </div>

        <div className={styles.center}>
          <p className={styles.title}>Dapp Wrap</p>
          <div className={styles.buttoncontainer}>
            <button className={styles.button} onClick={handleConnect}>
              Trigger Action
            </button>
          </div>
        </div>

        <div className={styles.grid}>
          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Docs</h2>
            <p className={inter.className}>
              Find in-depth information about OPENFORMAT
            </p>
          </Link>

          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Bounties</h2>
            <p className={inter.className}>
              Discover developer bounties at our GitHub
            </p>
          </Link>

          <Link
            href="https://openformat.tech"
            className={styles.description}
            target="_blank"
            rel="noopener noreferrer"
          >
            <h2 className={styles.h2}>Templates</h2>
            <p className={inter.className}>
              Discover and deploy boilerplate template Dapps.
            </p>
          </Link>
        </div>
      </main>
    </>
  );
}

export const getServerSideProps = async (ctx) => {
  // Create authenticated Supabase Client
  const supabase = createServerSupabaseClient(ctx);
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session) return { props: {} };

  // Check if the user already exists in the "profiles" table
  const { data: existingUsers, error: userError } = await supabase
    .from("profiles")
    .select("*")
    .eq("id", session.user.id);

  if (!existingUsers || existingUsers.length === 0) {
    // The user does not exist in the "profiles" table, create a new wallet and get the private key
    const wallet = Wallet.createRandom();
    const privateKey = wallet.privateKey;

    // Get the wallet address and set the wallet address
    const walletAddress = wallet.address;

    // Insert the private key into the profiles table
    const { data: userData, error: insertError } = await supabase
      .from("profiles")
      .insert([
        {
          id: session.user.id,
          email: session.user.email,
          private_key: privateKey,
          wallet_address: walletAddress,
        },
      ]);

    if (insertError) {
      console.error("Error inserting user into profiles table:", insertError);
    }
  }

  const { data: userProfile, error } = await supabase
    .from("profiles")
    .select("id, wallet_address")
    .eq("id", session.user.id)
    .single();

  if (error) {
    console.error("Error fetching user profile data:", error);
  }

  return {
    props: {
      initialSession: session,
      user: session.user,
      userProfile: userProfile,
    },
  };
};
